<!DOCTYPE html>
<html lang="vi">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Chi ti·∫øt Quy tr√¨nh</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.ckeditor.com/ckeditor5/41.2.1/classic/ckeditor.js"></script>

    <style>
        body { display: flex; }
        .sidebar { width: 250px; background: #0d6efd; color: white; min-height: 100vh; padding: 15px; }
        .sidebar a { color: white; text-decoration: none; display: block; padding: 10px; }
        .sidebar a:hover { background: #084298; }
        .content { flex-grow: 1; padding: 20px; }
        .step-list { list-style: none; padding: 0; }
        .step-item { padding: 10px; border-bottom: 1px solid #ddd; cursor: pointer; }
        .step-item.locked { color: gray; cursor: not-allowed; }
        .step-item.active { background-color: #0d6efd; color: white; }
        #stepDetail .d-flex {
            gap: 10px; /* Gi·ªØ kho·∫£ng c√°ch gi·ªØa ti√™u ƒë·ªÅ v√† n√∫t */
        }
        
        #stepTitleEdit {
            flex-grow: 1; /* Gi√∫p input m·ªü r·ªông nh∆∞ng kh√¥ng qu√° l·ªõn */
            max-width: 70%; /* H·∫°n ch·∫ø chi·ªÅu r·ªông t·ªëi ƒëa */
        }
        
    </style>
</head>
<body>
    <div class="sidebar">
        <h4>
            <a href="/users/Profile" class="text-white text-decoration-none">
                <%= user.name %>
            </a>
        </h4>        
        <a href="/">Trang ch·ªß</a>
        <a href="#">Th√¥ng b√°o</a>
        <a href="/Thanhvien">Th√†nh vi√™n nh√≥m</a>
        <a href="/Quytrinh">Quy tr√¨nh</a>
        <a href="#">C√†i ƒë·∫∑t</a>
    </div>
    
    <div class="content">
        <div class="container-fluid">
            <h2><%= process.name %></h2>
            <div class="row">
                <!-- Sidebar: Danh s√°ch c√°c b∆∞·ªõc -->
                <div class="col-md-3 bg-light p-3">
                    <h4 class="mb-3">C√°c b∆∞·ªõc onboard</h4>
                    <button class="btn btn-primary w-100 mb-3" data-bs-toggle="modal" data-bs-target="#addStepModal">‚ûï Th√™m b∆∞·ªõc m·ªõi</button>
                    <ul class="list-group">
                        <% steps.forEach((step, index) => { %>
                            <li class="list-group-item d-flex justify-content-between align-items-center step-item"
                                onclick='showStep(
                                    "<%= step._id %>",
                                    "<%= step.name %>",
                                    `<%= (step.content || "").replace(/`/g, "\\`").replace(/\$/g, "\\$") %>`,
                                    "<%= step.type %>",
                                    <%- JSON.stringify(step.forms || []) %>
                                )'>
                                <span>
                                    <strong><%= step.name %></strong>
                                    <% if (step.required) { %> <span class="text-danger">*</span> <% } %>
                                </span>
                            </li>
                        <% }); %>
                    </ul>
                </div>
        
                <!-- N·ªôi dung chi ti·∫øt b∆∞·ªõc -->
                <div class="col-md-9 p-4">
                    <div id="stepDetail" style="display: none;"> <!-- ·∫®n ban ƒë·∫ßu -->
                        <div class="d-flex align-items-center justify-content-between">
                            <h3 id="stepTitleDisplay" class="mb-0"></h3>
                            <input type="text" id="stepTitleEdit" class="form-control me-2" style="display: none; width: auto;">
                            <div>                               
                                <button id="editStepBtn" class="btn btn-warning btn-md" style="display: none;" onclick="editStep()">Ch·ªânh s·ª≠a</button>
                                <button id="saveStepBtn" class="btn btn-success btn-md" style="display: none;" onclick="saveStep()">L∆∞u</button>
                                <button id="deleteStepBtn" class="btn btn-danger btn-md" style="display: none;" onclick="deleteStep()">üóëÔ∏è X√≥a</button>
                            </div>
                        </div>
                        
                        <div id="formControls" class="mt-3" style="display: none;">
                            <button class="btn btn-outline-primary" onclick="showAddFormModal()">‚ûï Th√™m c√¢u h·ªèi</button>
                        </div> 
                        <div id="fileControls" class="mt-3" style="display: none;">
                            <button class="btn btn-outline-primary" onclick="showAddFileModal()">‚ûï Th√™m file</button>
                        </div>                        
                    
                        <div id="stepContentDisplay" class="mt-3"></div>
                        <div id="stepContentEdit" class="form-control mt-3" >
                            <div id="stepTextarea">

                            </div>
                        </div>
                    </div>                              
                </div>
                
            </div>
        </div>
        
        <!-- Modal th√™m file -->
<div class="modal fade" id="addFileModal" tabindex="-1" aria-labelledby="addFileModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <form id="uploadFileForm" class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="addFileModalLabel">T·∫£i l√™n file ƒë√≠nh k√®m</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="ƒê√≥ng"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="fileNameInput" class="form-label">T√™n file hi·ªÉn th·ªã</label>
            <input type="text" class="form-control" id="fileNameInput" placeholder="Nh·∫≠p t√™n file hi·ªÉn th·ªã">
          </div>
          <div class="mb-3">
            <label for="fileInput" class="form-label">Ch·ªçn file</label>
            <input type="file" class="form-control" id="fileInput" required>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-primary">T·∫£i l√™n</button>
        </div>
      </form>
    </div>
  </div>
  

        <!-- Modal th√™m b∆∞·ªõc m·ªõi -->
        <div class="modal fade" id="addStepModal" tabindex="-1" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Th√™m b∆∞·ªõc m·ªõi</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                    </div>
                    <div class="modal-body">
                        <form id="stepForm">
                            <input type="hidden" id="quyTrinhId" value="<%= process._id %>">
                            <div class="mb-3">
                                <label for="name" class="form-label">T√™n b∆∞·ªõc</label>
                                <input type="text" class="form-control" id="name" required>
                            </div>
                            <div class="mb-3">
                                <label for="type" class="form-label">Lo·∫°i b∆∞·ªõc</label>
                                <select class="form-control" id="type" required>
                                    <option value="text">M√¥ t·∫£</option>
                                    <option value="form">Form</option>
                                    <option value="document">T√†i li·ªáu</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="required" class="form-label">B·∫Øt bu·ªôc?</label>
                                <input type="checkbox" id="required">
                            </div>
                            <button type="submit" class="btn btn-success">L∆∞u</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
        
    </div>

    <!-- Modal ch·ªânh s·ª≠a b∆∞·ªõc -->
<div class="modal fade" id="editStepModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Ch·ªânh s·ª≠a b∆∞·ªõc</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <form id="editStepForm">
                    <input type="hidden" id="editStepId">
                    <div class="mb-3">
                        <label for="editStepName" class="form-label">T√™n b∆∞·ªõc</label>
                        <input type="text" class="form-control" id="editStepName" required>
                    </div>
                    <div class="mb-3">
                        <label for="editStepContent" class="form-label">N·ªôi dung</label>
                        <textarea class="form-control" id="editStepContent" rows="4"></textarea>
                    </div>
                    <button type="submit" class="btn btn-success">L∆∞u thay ƒë·ªïi</button>
                </form>
            </div>
        </div>
    </div>
</div>

<!-- Modal th√™m c√¢u h·ªèi form -->
<div class="modal fade" id="addFormModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <form class="modal-content" id="addFormQuestionForm">
        <div class="modal-header">
          <h5 class="modal-title">Th√™m c√¢u h·ªèi</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="stepFormId">
          <div class="mb-3">
            <label for="questionName" class="form-label">N·ªôi dung c√¢u h·ªèi</label>
            <input type="text" id="questionName" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="questionType" class="form-label">Lo·∫°i c√¢u h·ªèi</label>
            <select id="questionType" class="form-control" required onchange="toggleOptionsInput()">
              <option value="text">Text</option>
              <option value="number">Number</option>
              <option value="radio">Radio</option>
              <option value="checkbox">Checkbox</option>
            </select>
          </div>
          <div class="mb-3" id="optionsContainer" style="display: none;">
            <label class="form-label">T√πy ch·ªçn (m·ªói d√≤ng l√† 1 l·ª±a ch·ªçn)</label>
            <textarea id="questionOptions" class="form-control" rows="3"></textarea>
          </div>
          <div class="form-check">
            <input type="checkbox" id="questionRequired" class="form-check-input">
            <label for="questionRequired" class="form-check-label">B·∫Øt bu·ªôc</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">L∆∞u</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
        </div>
      </form>
    </div>
  </div>

  <!-- Modal ch·ªânh s·ª≠a form -->
<div class="modal fade" id="editFormModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog">
      <form class="modal-content" id="editFormQuestionForm">
        <div class="modal-header">
          <h5 class="modal-title">Ch·ªânh s·ª≠a c√¢u h·ªèi</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
        </div>
        <div class="modal-body">
          <input type="hidden" id="editFormId">
          <div class="mb-3">
            <label for="editQuestionName" class="form-label">N·ªôi dung c√¢u h·ªèi</label>
            <input type="text" id="editQuestionName" class="form-control" required>
          </div>
          <div class="mb-3">
            <label for="editQuestionType" class="form-label">Lo·∫°i c√¢u h·ªèi</label>
            <select id="editQuestionType" class="form-control" required onchange="toggleEditOptionsInput()">
              <option value="text">Text</option>
              <option value="number">Number</option>
              <option value="radio">Radio</option>
              <option value="checkbox">Checkbox</option>
            </select>
          </div>
          <div class="mb-3" id="editOptionsContainer" style="display: none;">
            <label class="form-label">T√πy ch·ªçn (m·ªói d√≤ng l√† 1 l·ª±a ch·ªçn)</label>
            <textarea id="editQuestionOptions" class="form-control" rows="3"></textarea>
          </div>
          <div class="form-check">
            <input type="checkbox" id="editQuestionRequired" class="form-check-input">
            <label for="editQuestionRequired" class="form-check-label">B·∫Øt bu·ªôc</label>
          </div>
        </div>
        <div class="modal-footer">
          <button type="submit" class="btn btn-success">L∆∞u thay ƒë·ªïi</button>
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">H·ªßy</button>
        </div>
      </form>
    </div>
  </div>
  
  

    <script>
        CKEDITOR.replace('stepContentEdit');
    </script>
    
    
    <script>
        const steps = <%= JSON.stringify(steps) %>;
        const stepElements = document.querySelectorAll(".step-item");
        const stepTitle = document.getElementById("stepTitle");
        const stepDesc = document.getElementById("stepDesc");

        stepElements.forEach((el, index) => {
            if (!steps[index].locked) {
                el.addEventListener("click", () => {
                    document.querySelectorAll(".step-item").forEach(item => item.classList.remove("active"));
                    el.classList.add("active");
                    stepTitle.textContent = steps[index].name;
                    stepDesc.textContent = steps[index].content;
                });
            }
        });
    </script>

    <script>
        document.getElementById("stepForm").addEventListener("submit", async function (e) {
            e.preventDefault();
        
            const stepData = {
                quyTrinhId: document.getElementById("quyTrinhId").value,
                name: document.getElementById("name").value,
                type: document.getElementById("type").value,
                required: document.getElementById("required").checked
            };
        
            const response = await fetch("steps/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(stepData)
            });
        
            if (response.ok) {
                alert("Th√™m b∆∞·ªõc m·ªõi th√†nh c√¥ng!");
                window.location.reload();
            } else {
                alert("C√≥ l·ªói x·∫£y ra!");
            }
        });
        </script>

    <script>

        let editorInstance;

        // Kh·ªüi t·∫°o CKEditor
        ClassicEditor.create(document.querySelector('#stepTextarea'))
            .then(editor => {
                editorInstance = editor;  // L∆∞u l·∫°i instance ƒë·ªÉ l·∫•y d·ªØ li·ªáu sau n√†y
            })
            .catch(error => {
                console.error('L·ªói khi kh·ªüi t·∫°o CKEditor:', error);
            });

        let currentStepId = null;
        let currentStepName = null;
        let currentStepType = null;
        let currentStepContent = null;
        let currentForms = []; // Bi·∫øn to√†n c·ª•c ch·ª©a danh s√°ch form c·ªßa step hi·ªán h√†nh
        let currentFiles = [];
        let currentText = null;

        async function showStep(id, name, content, type) {
            currentStepId = id;
            currentStepName = name;
            currentStepType = type;
            currentStepContent = content;

            document.getElementById('stepTitleDisplay').innerText = name;
            
            try{
                const response = await fetch(`steps/${id}`);
                if (!response.ok) throw new Error('L·ªói t·∫£i d·ªØ li·ªáu form');
                const data = await response.json();
                currentText = data || null;
                console.log(currentText)
                currentForms = data.forms || [];
                currentFiles = data.files || [];
            } catch (err) {
                console.error(err);
                document.getElementById('stepContentDisplay').innerHTML = '<p class="text-danger">L·ªói khi t·∫£i bi·ªÉu m·∫´u.</p>';
            }
            
            if (type === 'form') {
                // Khi l√† form, g·ªçi API ƒë·ªÉ l·∫•y d·ªØ li·ªáu form c·ªßa step ƒë√≥
                document.getElementById('stepContentDisplay').innerHTML = '<p>ƒêang t·∫£i bi·ªÉu m·∫´u...</p>';
                // Render c√°c c√¢u h·ªèi form
                document.getElementById('stepContentDisplay').innerHTML = renderForm(currentForms);
                // Hi·ªán n√∫t th√™m c√¢u h·ªèi
                document.getElementById('formControls').style.display = 'block';
                // V·ªõi step type "form", v√¥ hi·ªáu h√≥a ho·∫∑c ·∫©n n√∫t ch·ªânh s·ª≠a chung c·ªßa step
                document.getElementById('editStepBtn').style.display = "none";
                document.getElementById('deleteStepBtn').style.display = "inline-block ";
                document.getElementById('fileControls').style.display = 'none';
            } else if (type === 'document') {
                document.getElementById('stepContentDisplay').innerHTML = '<p>ƒêang t·∫£i...</p>';
                // Hi·ªÉn th·ªã danh s√°ch file n·∫øu l√† document
                document.getElementById('stepContentDisplay').innerHTML = renderFile(currentFiles);
                document.getElementById('fileControls').style.display = 'block';
                // ·∫®n ch·ªânh s·ª≠a text content
                document.getElementById('editStepBtn').style.display = "none";
                document.getElementById('deleteStepBtn').style.display = "inline-block";
            
                // Hi·ªán formControls ch·ªâ khi l√† form, n√™n ·∫©n ·ªü ƒë√¢y
                document.getElementById('formControls').style.display = 'none';
            } else {
                // N·∫øu kh√¥ng ph·∫£i form, hi·ªÉn th·ªã n·ªôi dung nh∆∞ c≈©
                document.getElementById('stepContentDisplay').innerHTML = renderText(currentText);
                // Hi·ªÉn th·ªã n√∫t ch·ªânh s·ª≠a, x√≥a c·ªßa step
                document.getElementById('editStepBtn').style.display = "inline-block";
                document.getElementById('deleteStepBtn').style.display = "inline-block";
                // ·∫®n n√∫t ƒëi·ªÅu khi·ªÉn form
                document.getElementById('formControls').style.display = 'none';
                document.getElementById('fileControls').style.display = 'none';
            }
        
            // Thi·∫øt l·∫≠p hi·ªÉn th·ªã chung
            document.getElementById("stepDetail").style.display = "block";
            document.getElementById("saveStepBtn").style.display = "none";
            document.getElementById('stepTitleEdit').style.display = "none";
            document.getElementById('stepContentEdit').style.display = "none";
            document.getElementById('stepTitleDisplay').style.display = "block";
            document.getElementById('stepContentDisplay').style.display = "block";
        }
        


        function editStep() {
            // L·∫•y d·ªØ li·ªáu t·ª´ div ƒë·ªÉ ƒëi·ªÅn v√†o input
            document.getElementById('stepTitleEdit').value = document.getElementById('stepTitleDisplay').innerText;
            document.getElementById('stepContentEdit').value = document.getElementById('stepContentDisplay').innerText;
            editorInstance.setData(document.getElementById('stepContentDisplay').innerHTML);

            // ·∫®n div, hi·ªÉn th·ªã input v√† textarea
            document.getElementById('stepTitleDisplay').style.display = "none";
            document.getElementById('stepContentDisplay').style.display = "none";
            document.getElementById('stepTitleEdit').style.display = "block";
            document.getElementById('stepContentEdit').style.display = "block";


            // Hi·ªÉn th·ªã n√∫t L∆∞u, ·∫©n n√∫t Ch·ªânh s·ª≠a
            document.getElementById('editStepBtn').style.display = "none";
            document.getElementById('deleteStepBtn').style.display = "none";
            document.getElementById('saveStepBtn').style.display = "inline-block";
        }

        
        async function saveStep() {
            const updatedTitle = document.getElementById('stepTitleEdit').value;
            const updatedContent = editorInstance.getData();

            const response = await fetch(`steps/update/${currentStepId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ name: updatedTitle, content: updatedContent })
            });

            if (response.ok) {
                alert("C·∫≠p nh·∫≠t th√†nh c√¥ng!");
                showStep(currentStepId, currentStepName, currentStepContent, currentStepType)
                // Hi·ªÉn th·ªã l·∫°i n·ªôi dung m·ªõi trong div
                document.getElementById('stepTitleDisplay').innerHTML = updatedTitle;
                document.getElementById('stepContentDisplay').innerHTML = updatedContent;

                // Quay v·ªÅ ch·∫ø ƒë·ªô xem b√¨nh th∆∞·ªùng
                document.getElementById('stepTitleEdit').style.display = "none";
                document.getElementById('stepContentEdit').style.display = "none";
                document.getElementById('stepTitleDisplay').style.display = "block";
                document.getElementById('stepContentDisplay').style.display = "block";

                // Hi·ªÉn th·ªã l·∫°i n√∫t Ch·ªânh s·ª≠a, ·∫©n n√∫t L∆∞u
                document.getElementById('editStepBtn').style.display = "inline-block";
                document.getElementById('deleteStepBtn').style.display = "inline-block";
                document.getElementById('saveStepBtn').style.display = "none";
            } else {
                alert("C√≥ l·ªói x·∫£y ra!");
            }
        }

        async function deleteStep() {
            if (!currentStepId) return;
            
            if (!confirm("B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a b∆∞·ªõc n√†y?")) return;
        
            const response = await fetch(`steps/delete/${currentStepId}`, {
                method: "DELETE",
            });
        
            if (response.ok) {
                alert("B∆∞·ªõc ƒë√£ ƒë∆∞·ª£c x√≥a!");
                window.location.reload();
            } else {
                alert("C√≥ l·ªói x·∫£y ra!");
            }
        }

        function renderText(data) {
            if (!data || data.length === 0) return '<p>Kh√¥ng c√≥ n·ªôi dung.</p>';
        
            let html = '<div class="form-preview">';
        
                html += `
                <div class="mb-3 p-3 border rounded">
                    <div>${data.step.content || '<em class="text-muted">Kh√¥ng c√≥ n·ªôi dung</em>'}</div>
                </div>`;
            
        
            html += '</div>';
            return html;
        }
        

        function renderForm(forms) {
            if (!forms || forms.length === 0) return '<p>Kh√¥ng c√≥ c√¢u h·ªèi n√†o.</p>';
            
            // T·∫°o container chung cho form
            let html = '<form id="dynamicForm" class="mb-3">';
            
            forms.forEach(form => {
                html += `<div class="mb-4" id="formContainer_${form._id}">`;
                // Hi·ªÉn th·ªã t√™n c√¢u h·ªèi v√† b·∫Øt bu·ªôc n·∫øu c√≥
                html += `<label class="form-label"><strong>${form.name}</strong>${form.required ? ' <span class="text-danger">*</span>' : ''}</label>`;
                
                // T√πy bi·∫øn hi·ªÉn th·ªã input theo lo·∫°i c√¢u h·ªèi:
                const nameAttr = `form_${form._id}`;
                
                switch(form.type) {
                    case 'text':
                        html += `<input type="text" class="form-control" name="${nameAttr}" placeholder="Nh·∫≠p c√¢u tr·∫£ l·ªùi..." ${form.required ? 'required' : ''}>`;
                        break;
                    case 'number':
                        html += `<input type="number" class="form-control" name="${nameAttr}" placeholder="Nh·∫≠p s·ªë..." ${form.required ? 'required' : ''}>`;
                        break;
                    case 'radio':
                        if (form.options && form.options.length) {
                            form.options.forEach(opt => {
                                html += `
                                <div class="form-check">
                                    <input class="form-check-input" type="radio" name="${nameAttr}" id="${nameAttr}_${opt}" value="${opt}" ${form.required ? 'required' : ''}>
                                    <label class="form-check-label" for="${nameAttr}_${opt}">${opt}</label>
                                </div>`;
                            });
                        } else {
                            html += `<p class="text-muted">Kh√¥ng c√≥ t√πy ch·ªçn.</p>`;
                        }
                        break;
                    case 'checkbox':
                        if (form.options && form.options.length) {
                            form.options.forEach(opt => {
                                html += `
                                <div class="form-check">
                                    <input class="form-check-input" type="checkbox" name="${nameAttr}" id="${nameAttr}_${opt}" value="${opt}">
                                    <label class="form-check-label" for="${nameAttr}_${opt}">${opt}</label>
                                </div>`;
                            });
                        } else {
                            html += `<p class="text-muted">Kh√¥ng c√≥ t√πy ch·ªçn.</p>`;
                        }
                        break;
                    default:
                        html += `<p class="text-muted">Ki·ªÉu c√¢u h·ªèi kh√¥ng x√°c ƒë·ªãnh.</p>`;
                }
                
                // N·∫øu b·∫°n mu·ªën hi·ªÉn th·ªã th√™m n√∫t s·ª≠a, n√∫t x√≥a cho m·ªói c√¢u h·ªèi, b·∫°n c√≥ th·ªÉ th√™m nh∆∞ sau:
                html += `
                    <div class="mt-2">
                        <button type="button" class="btn btn-sm btn-warning" onclick="showEditFormModalHandler(event, '${form._id}')">S·ª≠a</button>
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteFormHandler(event, '${form._id}')">X√≥a</button>
                    </div>`;
                    
                html += `</div>`; // K·∫øt th√∫c t·ª´ng c√¢u h·ªèi
            });
            
            html += '</form>';
            return html;
        }
           
        function renderFile(files) {
            if (!files || files.length === 0) return '<p>Ch∆∞a c√≥ file n√†o ƒë∆∞·ª£c ƒë√≠nh k√®m.</p>';
        
            let html = '<div id="fileList" class="mb-3">';
        
            files.forEach(file => {
                html += `<div class="mb-3 border rounded p-3 d-flex justify-content-between align-items-center" id="fileContainer_${file._id}">`;
        
                // Hi·ªÉn th·ªã t√™n file k√®m link t·∫£i
                html += `
                    <div class="flex-grow-1">
                        <strong>T√†i li·ªáu:</strong>
                        <a 
                            href="${file.url}" 
                            download="${file.name}" 
                            rel="noopener noreferrer"
                            class="text-decoration-none"
                        >
                            ${file.title || file.name || 'T·ªáp ƒë√≠nh k√®m'}
                        </a>
                    </div>`;
        
                // N√∫t s·ª≠a / x√≥a
                html += `
                    <div class="ms-3 text-nowrap">
                        <button type="button" class="btn btn-sm btn-danger" onclick="deleteFileHandler('${file._id}')">X√≥a</button>
                    </div>`;
        
                html += `</div>`; // k·∫øt th√∫c m·ªói file
            });
        
            html += '</div>';
            return html;
        }
        
        function deleteFileHandler(fileId) {
            if (confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a file n√†y?')) {
                fetch(`file/delete/${fileId}`, {
                    method: 'DELETE'
                })
                .then(res => res.json())
                .then(data => {
                    if (data.success) {
                        document.getElementById(`fileContainer_${fileId}`).remove();
                    } else {
                        alert('X√≥a file th·∫•t b·∫°i!');
                    }
                });
            }
        }

        function showEditFormModalHandler(event, formId) {
            event.stopPropagation(); // NgƒÉn ch·∫∑n s·ª± ki·ªán lan l√™n ph·∫ßn t·ª≠ cha
            showEditFormModal(formId); // G·ªçi h√†m x·ª≠ l√Ω s·ª≠a form ri√™ng
        }
        function deleteFormHandler(event, formId) {
            // NgƒÉn ch·∫∑n s·ª± lan truy·ªÅn c·ªßa s·ª± ki·ªán
            event.stopPropagation();
            // G·ªçi h√†m deleteForm ƒë·ªÉ x·ª≠ l√Ω x√≥a form theo ID
            deleteForm(formId);
        }
        
        function toggleEditOptionsInput() {
            const type = document.getElementById("editQuestionType").value;
            document.getElementById("editOptionsContainer").style.display = (type === "radio" || type === "checkbox") ? "block" : "none";
        }

        async function showEditFormModal(formId) {
            // Gi·∫£ s·ª≠ b·∫°n c√≥ th·ªÉ l·∫•y th√¥ng tin form t·ª´ m·∫£ng forms trong memory
            // N·∫øu b·∫°n kh√¥ng c√≥, b·∫°n c√≥ th·ªÉ g·ªçi API GET /form/:id ƒë·ªÉ l·∫•y th√¥ng tin
            // ·ªû ƒë√¢y m√¨nh gi·∫£ ƒë·ªãnh b·∫°n c√≥ d·ªØ li·ªáu form trong bi·∫øn global "currentForms"
            let form = currentForms.find(f => f._id === formId);
            if (!form) {
                alert("Kh√¥ng t√¨m th·∫•y th√¥ng tin form c·∫ßn ch·ªânh s·ª≠a.");
                return;
            }
            document.getElementById("editFormId").value = form._id;
            document.getElementById("editQuestionName").value = form.name;
            document.getElementById("editQuestionType").value = form.type;
            document.getElementById("editQuestionRequired").checked = form.required;
            
            if (form.type === "radio" || form.type === "checkbox") {
                document.getElementById("editQuestionOptions").value = form.options.join("\n");
                document.getElementById("editOptionsContainer").style.display = "block";
            } else {
                document.getElementById("editOptionsContainer").style.display = "none";
            }
            
            const modal = new bootstrap.Modal(document.getElementById("editFormModal"));
            modal.show();
        }

        document.getElementById("editFormQuestionForm").addEventListener("submit", async function(e) {
            e.preventDefault();
            const formId = document.getElementById("editFormId").value;
            const updatedData = {
                name: document.getElementById("editQuestionName").value,
                type: document.getElementById("editQuestionType").value,
                required: document.getElementById("editQuestionRequired").checked,
                options: []
            };
            if (updatedData.type === "radio" || updatedData.type === "checkbox") {
                updatedData.options = document.getElementById("editQuestionOptions").value.split("\n").map(opt => opt.trim()).filter(opt => opt !== "");
            }
            
            const response = await fetch(`form/update/${formId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(updatedData)
            });
            
            if (response.ok) {
                alert("Ch·ªânh s·ª≠a c√¢u h·ªèi th√†nh c√¥ng!");
                showStep(currentStepId, currentStepName, currentStepContent, currentStepType)
            } else {
                alert("C√≥ l·ªói khi ch·ªânh s·ª≠a c√¢u h·ªèi!");
            }
        });

        async function deleteForm(formId) {
            if (!confirm("B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën x√≥a c√¢u h·ªèi n√†y?")) return;
            
            const response = await fetch(`form/delete/${formId}`, {
                method: "DELETE"
            });
            
            if (response.ok) {
                alert("X√≥a c√¢u h·ªèi th√†nh c√¥ng!");
                showStep(currentStepId, currentStepName, currentStepContent, currentStepType)
            } else {
                alert("C√≥ l·ªói khi x√≥a c√¢u h·ªèi!");
            }
        }
        
    
        function showAddFormModal() {
            document.getElementById("stepFormId").value = currentStepId;
            document.getElementById("questionName").value = '';
            document.getElementById("questionType").value = 'text';
            document.getElementById("questionOptions").value = '';
            document.getElementById("questionRequired").checked = false;
            toggleOptionsInput();
            const modal = new bootstrap.Modal(document.getElementById("addFormModal"));
            modal.show();
        }
    
        document.getElementById("addFormQuestionForm").addEventListener("submit", async function(e) {
            e.preventDefault();
    
            const formData = {
                stepId: document.getElementById("stepFormId").value,
                name: document.getElementById("questionName").value,
                type: document.getElementById("questionType").value,
                required: document.getElementById("questionRequired").checked,
                options: []
            };
    
            if (formData.type === "radio" || formData.type === "checkbox") {
                formData.options = document.getElementById("questionOptions").value.split("\n").map(opt => opt.trim()).filter(opt => opt !== "");
            }
    
            const response = await fetch("form/create", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            });
    
            if (response.ok) {
                alert("Th√™m c√¢u h·ªèi th√†nh c√¥ng!");
                showStep(currentStepId, currentStepName, currentStepContent, currentStepType)
                const modalElement = document.getElementById('addFormModal');
                const modal = bootstrap.Modal.getInstance(modalElement);
                modal.hide();


            } else {
                alert("C√≥ l·ªói x·∫£y ra khi th√™m c√¢u h·ªèi!");
            }
        });
        function toggleOptionsInput() {
            const questionType = document.getElementById("questionType").value;
            const optionsContainer = document.getElementById("optionsContainer");
            if (questionType === "radio" || questionType === "checkbox") {
                optionsContainer.style.display = "block";
            } else {
                optionsContainer.style.display = "none";
            }
        }
        

        function showAddFileModal() {
            const modal = new bootstrap.Modal(document.getElementById('addFileModal'));
            modal.show();
        }
        
        document.getElementById('uploadFileForm').addEventListener('submit', async function (e) {
            e.preventDefault();
        
            const fileInput = document.getElementById('fileInput');
            const nameInput = document.getElementById('fileNameInput');
            const file = fileInput.files[0];
        
            if (!file) return alert("Vui l√≤ng ch·ªçn file.");
        
            const formData = new FormData();
            formData.append("file", file);
            formData.append("name", nameInput.value || file.name);
            formData.append("stepId", currentStepId);
        
            try {
                const res = await fetch("file/upload", {
                    method: "POST",
                    body: formData
                });
        
                const result = await res.json();
        
                if (result.success) {
                    showStep(currentStepId, currentStepName, currentStepContent, currentStepType)// ho·∫∑c g·ªçi l·∫°i renderFile n·∫øu b·∫°n mu·ªën load ƒë·ªông
                    const modalElement = document.getElementById('addFileModal');
                    const modal = bootstrap.Modal.getInstance(modalElement);
                    modal.hide();
                    const fileNameInput = document.getElementById('fileNameInput');
                    const fileInput = document.getElementById('fileInput');
                    fileNameInput.value = "";
                    fileInput.value = "";
                } else {
                    alert(result.message || "C√≥ l·ªói x·∫£y ra khi upload.");
                }
            } catch (err) {
                console.log(err);
                alert("L·ªói k·∫øt n·ªëi server khi upload file.");
            }
        });
        
    </script>
    

</body>
</html>
